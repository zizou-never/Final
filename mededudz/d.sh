#!/bin/bash

# ==============================================================================
# == SCRIPT DE RECONSTRUCTION COMPLET POUR MEDEDUDZ
# == Auteur: Votre Assistant IA
# == Version: 1.0
# ==
# == Ce script va:
# == 1. Installer toutes les d√©pendances shadcn/ui requises.
# == 2. Cr√©er l'arborescence compl√®te des fichiers et dossiers.
# == 3. √âcrire le code source final et corrig√© dans chaque fichier.
# == 4. Cr√©er un logo temporaire pour √©viter les erreurs.
# ==============================================================================

echo "üöÄ D√©marrage de la reconstruction du projet Mededudz..."
echo "--------------------------------------------------------"

# --- PARTIE 1: INSTALLATION DES D√âPENDANCES SHADCN/UI ---
echo "üì¶ Installation des composants shadcn/ui..."
npx shadcn-ui@latest add tabs
npx shadcn-ui@latest add accordion
npx shadcn-ui@latest add input
npx shadcn-ui@latest add select
npx shadcn-ui@latest add checkbox
npx shadcn-ui@latest add badge
npx shadcn-ui@latest add card
npx shadcn-ui@latest add button
npx shadcn-ui@latest add breadcrumb
npx shadcn-ui@latest add progress
npx shadcn-ui@latest add tooltip
npx shadcn-ui@latest add scroll-area
npx shadcn-ui@latest add sheet
npx shadcn-ui@latest add separator
npx shadcn-ui@latest add skeleton
echo "‚úÖ Composants install√©s."
echo ""

# --- PARTIE 2: CR√âATION DE L'ARBORESCENCE ---
echo "üìÅ Cr√©ation de la structure des dossiers..."
mkdir -p src/app/residanat/[chapter]/[module]/[course]
mkdir -p src/app/qbank/[bank]
mkdir -p src/app/qbank/session/[sessionId]
mkdir -p src/components/layout
mkdir -p public/images
echo "‚úÖ Dossiers cr√©√©s."
echo ""

# --- PARTIE 3: CR√âATION DU LOGO TEMPORAIRE ---
echo "üé® Cr√©ation d'un logo temporaire (placeholder)..."
cat << 'EOF' > public/images/logo.png
<svg width="32" height="32" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#0052CC;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#4422DD;stop-opacity:1" />
    </linearGradient>
  </defs>
  <rect width="100" height="100" rx="20" fill="url(#grad1)"/>
  <path d="M25 75 L25 25 L50 50 L75 25 L75 75" fill="none" stroke="white" stroke-width="10" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
EOF
echo "‚úÖ Logo temporaire cr√©√©."
echo ""


# --- PARTIE 4: √âCRITURE DES FICHIERS SOURCE ---

# --- Header ---
echo "üìÑ √âcriture de src/components/layout/header.tsx..."
cat << 'EOF' > src/components/layout/header.tsx
import Link from 'next/link'
import Image from 'next/image'
import { Button } from '@/components/ui/button'

export function Header() {
  return (
    <header className="sticky top-0 z-40 w-full border-b border-gray-200 bg-white/70 backdrop-blur supports-[backdrop-filter]:bg-white/60">
      <div className="container mx-auto flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
        <Link href="/" className="flex items-center gap-2">
          <Image 
            src="/images/logo.png"
            alt="Mededudz Logo"
            width={32}
            height={32}
          />
          <span className="font-bold text-lg">mededudz</span>
        </Link>
        <nav className="hidden md:flex items-center gap-6 text-sm">
          <Link href="/qbank" className="text-gray-700 hover:text-gray-900 transition-colors">Qbank</Link>
          <Link href="/residanat" className="text-gray-700 hover:text-gray-900 transition-colors">R√©sidanat</Link>
        </nav>
        <div className="flex items-center gap-2">
          <Button asChild variant="ghost" className="hidden sm:inline-flex">
            <Link href="/auth/signin">Se connecter</Link>
          </Button>
          <Button asChild>
            <Link href="/auth/signup">S‚Äôinscrire</Link>
          </Button>
        </div>
      </div>
    </header>
  )
}
EOF

# --- Footer ---
echo "üìÑ √âcriture de src/components/layout/footer.tsx..."
cat << 'EOF' > src/components/layout/footer.tsx
import Link from 'next/link'

export function Footer() {
  return (
    <footer className="border-t border-gray-200 bg-white">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-10">
        <div className="grid md:grid-cols-4 gap-8">
          <div>
            <div className="flex items-center gap-2 mb-3">
              <div className="h-8 w-8 rounded-lg bg-blue-500" />
              <span className="font-bold text-lg">mededudz</span>
            </div>
            <p className="text-sm text-gray-600">
              Plateforme pour la pr√©paration du concours de r√©sidanat.
            </p>
          </div>
          <div>
            <p className="font-semibold mb-2">Produit</p>
            <ul className="space-y-2 text-sm text-gray-600">
              <li><Link href="/qbank">Qbank</Link></li>
              <li><Link href="/residanat">R√©sidanat</Link></li>
            </ul>
          </div>
          <div>
            <p className="font-semibold mb-2">Ressources</p>
            <ul className="space-y-2 text-sm text-gray-600">
              <li><Link href="/faq">FAQ</Link></li>
            </ul>
          </div>
          <div>
            <p className="font-semibold mb-2">L√©gal</p>
            <ul className="space-y-2 text-sm text-gray-600">
              <li><Link href="/legal/cgu">Conditions</Link></li>
            </ul>
          </div>
        </div>
        <div className="mt-8 border-t border-gray-100 pt-4 text-xs text-gray-500 text-center">
          ¬© {new Date().getFullYear()} mededudz ‚Äî Tous droits r√©serv√©s.
        </div>
      </div>
    </footer>
  )
}
EOF

# --- Layout principal ---
echo "üìÑ √âcriture de src/app/layout.tsx..."
cat << 'EOF' > src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { Header } from "@/components/layout/header";
import { Footer } from "@/components/layout/footer";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Mededudz - Pr√©paration R√©sidanat",
  description: "Votre plateforme pour la pr√©paration du concours de r√©sidanat √† Constantine.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="fr">
      <body className={inter.className}>
        <div className="flex flex-col min-h-screen">
          <Header />
          <main className="flex-grow">
            {children}
          </main>
          <Footer />
        </div>
      </body>
    </html>
  );
}
EOF

# --- Page d'accueil ---
echo "üìÑ √âcriture de src/app/page.tsx..."
cat << 'EOF' > src/app/page.tsx
'use client'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { ArrowRight, Brain, BookOpen, BarChart3, MessageSquare } from 'lucide-react'

export default function HomePage() {
  return (
    <>
      <section className="relative bg-gray-50 overflow-hidden">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 pt-28 pb-16 md:pt-36 md:pb-24 text-center">
            <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight mb-6">
              Votre Qbank et cours pour le r√©sidanat de Constantine
            </h1>
            <p className="text-lg md:text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
              Tout-en-un pour pr√©parer efficacement: questions valid√©es, explications, cours structur√©s et suivi de progression.
            </p>
            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <Button asChild size="lg" className="bg-primary-600 hover:bg-primary-700">
                <Link href="/auth/signup">Commencer gratuitement</Link>
              </Button>
              <Button asChild size="lg" variant="outline" className="border-gray-300">
                <Link href="/qbank">
                  Explorer la Qbank
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
              </Button>
            </div>
        </div>
      </section>
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center max-w-3xl mx-auto mb-12">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">Tout ce qu‚Äôil faut pour r√©ussir</h2>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div className="bg-white rounded-xl p-6 text-center">
              <Brain className="h-8 w-8 text-primary-600 mx-auto mb-3" />
              <h3 className="text-lg font-semibold mb-1">Qbank valid√©e</h3>
              <p className="text-gray-600 text-sm">QCM au format concours, corrections d√©taill√©es.</p>
            </div>
            <div className="bg-white rounded-xl p-6 text-center">
              <BookOpen className="h-8 w-8 text-primary-600 mx-auto mb-3" />
              <h3 className="text-lg font-semibold mb-1">Cours structur√©s</h3>
              <p className="text-gray-600 text-sm">Synth√®ses cibl√©es, fiches, vid√©os et tableaux.</p>
            </div>
            <div className="bg-white rounded-xl p-6 text-center">
              <BarChart3 className="h-8 w-8 text-primary-600 mx-auto mb-3" />
              <h3 className="text-lg font-semibold mb-1">Stats & suivi</h3>
              <p className="text-gray-600 text-sm">Courbe de progression, points faibles, r√©visions.</p>
            </div>
            <div className="bg-white rounded-xl p-6 text-center">
              <MessageSquare className="h-8 w-8 text-primary-600 mx-auto mb-3" />
              <h3 className="text-lg font-semibold mb-1">Communaut√©</h3>
              <p className="text-gray-600 text-sm">Forum d‚Äôentraide, groupes d‚Äô√©tude, Q&R.</p>
            </div>
          </div>
        </div>
      </section>
    </>
  )
}
EOF

# --- R√©sidanat (Chapitres) ---
echo "üìÑ √âcriture de src/app/residanat/page.tsx..."
cat << 'EOF' > src/app/residanat/page.tsx
import Link from 'next/link'
import { supabase } from '@/lib/supabase'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from '@/components/ui/breadcrumb'
import { BookOpen, Stethoscope, Scissors } from 'lucide-react'
async function getChapters() {
  const { data, error } = await supabase.from('chapters').select('id, slug, title, description').order('sort_order', { ascending: true })
  if (error) { console.error(error); return [] }
  return data ?? []
}
const chapterIcon: Record<string, any> = { biologie: BookOpen, clinique: Stethoscope, chirurgie: Scissors }
export default async function Page() {
  const chapters = await getChapters()
  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-10">
      <Breadcrumb><BreadcrumbList><BreadcrumbItem><BreadcrumbLink href="/">Accueil</BreadcrumbLink></BreadcrumbItem><BreadcrumbSeparator /><BreadcrumbItem><BreadcrumbPage>R√©sidanat</BreadcrumbPage></BreadcrumbItem></BreadcrumbList></Breadcrumb>
      <div className="max-w-3xl mt-6 mb-10"><h1 className="text-4xl font-bold mb-3">Parcours R√©sidanat</h1><p className="text-gray-600">Trois chapitres majeurs ‚Äî Biologie, Clinique et Chirurgie ‚Äî organis√©s en modules et cours cibl√©s.</p></div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {chapters.map((ch) => {
          const Icon = chapterIcon[ch.slug] ?? BookOpen
          return (
            <Card key={ch.id} className="hover:shadow-md transition-all">
              <CardHeader><div className="flex items-center gap-2"><div className="h-10 w-10 rounded-lg bg-primary-50 flex items-center justify-center"><Icon className="h-5 w-5 text-primary-600" /></div><CardTitle>{ch.title}</CardTitle></div></CardHeader>
              <CardContent><p className="text-gray-600 mb-4">{ch.description}</p><Badge variant="secondary" className="mb-4">Modules organis√©s</Badge><div><Link className="text-primary-700 font-medium hover:underline" href={`/residanat/${ch.slug}`}>Voir les modules ‚Üí</Link></div></CardContent>
            </Card>
          )
        })}
        {chapters.length === 0 && <Card><CardContent className="py-10 text-gray-500">Aucun chapitre ‚Äî ajoute Biologie, Clinique, Chirurgie.</CardContent></Card>}
      </div>
    </div>
  )
}
EOF

# --- R√©sidanat (Modules) ---
echo "üìÑ √âcriture de src/app/residanat/[chapter]/page.tsx..."
cat << 'EOF' > src/app/residanat/[chapter]/page.tsx
import Link from 'next/link'
import { notFound } from 'next/navigation'
import { supabase } from '@/lib/supabase'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from '@/components/ui/breadcrumb'
async function getChapter(slug: string) {
  const { data, error } = await supabase.from('chapters').select('id, slug, title, description').eq('slug', slug).maybeSingle()
  if (error) console.error(error)
  return data
}
async function getModules(chapterId: string) {
  const { data, error } = await supabase.from('modules').select('id, slug, title, description, year_min, year_max').eq('chapter_id', chapterId).order('sort_order', { ascending: true })
  if (error) { console.error(error); return [] }
  return data ?? []
}
export default async function Page({ params }: { params: { chapter: string }}) {
  const chapter = await getChapter(params.chapter)
  if (!chapter) return notFound()
  const modules = await getModules(chapter.id)
  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-10">
      <Breadcrumb><BreadcrumbList><BreadcrumbItem><BreadcrumbLink href="/">Accueil</BreadcrumbLink></BreadcrumbItem><BreadcrumbSeparator /><BreadcrumbItem><BreadcrumbLink href="/residanat">R√©sidanat</BreadcrumbLink></BreadcrumbItem><BreadcrumbSeparator /><BreadcrumbItem><BreadcrumbPage>{chapter.title}</BreadcrumbPage></BreadcrumbItem></BreadcrumbList></Breadcrumb>
      <div className="max-w-3xl mt-6 mb-8"><h1 className="text-3xl font-bold mb-2">{chapter.title}</h1><p className="text-gray-600">{chapter.description}</p></div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {modules.map((m) => (
          <Card key={m.id} className="hover:shadow-md transition-all">
            <CardHeader><CardTitle className="text-lg">{m.title}</CardTitle></CardHeader>
            <CardContent><p className="text-gray-600 mb-4 line-clamp-3">{m.description}</p><p className="text-sm text-gray-500 mb-4">Ann√©es: {m.year_min ?? '‚Äî'}{m.year_max ? `‚Äì${m.year_max}` : ''}</p><Link href={`/residanat/${chapter.slug}/${m.slug}`} className="text-primary-700 font-medium hover:underline">Voir les cours ‚Üí</Link></CardContent>
          </Card>
        ))}
        {modules.length === 0 && <Card><CardContent className="py-10 text-gray-500">Aucun module.</CardContent></Card>}
      </div>
    </div>
  )
}
EOF

# --- Qbank (Landing) ---
echo "üìÑ √âcriture de src/app/qbank/page.tsx..."
cat << 'EOF' > src/app/qbank/page.tsx
import Link from 'next/link'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Brain, GraduationCap } from 'lucide-react'
export default function Page() {
  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-10">
      <div className="max-w-3xl mb-10"><h1 className="text-4xl font-bold mb-3">Qbank</h1><p className="text-gray-600">Entra√Ænez-vous avec des QCM cibl√©s: g√©n√©rale (6 ann√©es) et sp√©ciale R√©sidanat.</p></div>
      <div className="grid md:grid-cols-2 gap-6">
        <Card className="hover:shadow-md transition-all"><CardHeader><CardTitle className="flex items-center gap-2"><GraduationCap className="h-5 w-5 text-primary-600" />Qbank G√©n√©rale</CardTitle></CardHeader><CardContent><p className="text-gray-600 mb-3">Contient tous les modules des 6 ann√©es d‚Äô√©tudes.</p><Badge variant="secondary" className="mb-4">Ann√©es 1 √† 6</Badge><div><Link className="text-primary-700 font-medium hover:underline" href="/qbank/general">Explorer ‚Üí</Link></div></CardContent></Card>
        <Card className="hover:shadow-md transition-all"><CardHeader><CardTitle className="flex items-center gap-2"><Brain className="h-5 w-5 text-primary-600" />Qbank R√©sidanat</CardTitle></CardHeader><CardContent><p className="text-gray-600 mb-3">Cibl√©e sur les cours inclus dans le R√©sidanat.</p><Badge variant="secondary" className="mb-4">Ciblage concours</Badge><div><Link className="text-primary-700 font-medium hover:underline" href="/qbank/residanat">Explorer ‚Üí</Link></div></CardContent></Card>
      </div>
    </div>
  )
}
EOF

# --- Qbank (Filtres) ---
echo "üìÑ √âcriture de src/app/qbank/[bank]/page.tsx..."
cat << 'EOF' > src/app/qbank/[bank]/page.tsx
'use client'
import { useEffect, useState } from 'react'
import { useRouter, useSearchParams, useParams } from 'next/navigation'
import { supabase } from '@/lib/supabase'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Checkbox } from '@/components/ui/checkbox'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Progress } from '@/components/ui/progress'
export default function Page() {
  const { bank } = useParams<{ bank: 'general' | 'residanat' }>()
  const router = useRouter()
  const sp = useSearchParams()
  const [chapters, setChapters] = useState<any[]>([])
  const [modules, setModules] = useState<any[]>([])
  const [selectedChapter, setSelectedChapter] = useState<string>(sp.get('chapter') || '')
  const [selectedModule, setSelectedModule] = useState<string>(sp.get('module') || '')
  const [year, setYear] = useState<string>(sp.get('year') || '')
  const [difficulty, setDifficulty] = useState<string>(sp.get('difficulty') || '')
  const [onlyUnseen, setOnlyUnseen] = useState<boolean>(sp.get('unseen') === '1')
  useEffect(() => { supabase.from('chapters').select('id, slug, title').then(({ data }) => setChapters(data ?? [])) }, [])
  useEffect(() => {
    if (!selectedChapter) { setModules([]); return; }
    supabase.from('modules').select('id, slug, title, chapter_id').eq('chapter_id', selectedChapter).then(({ data }) => setModules(data ?? []))
  }, [selectedChapter])
  const canSetYear = bank === 'general'
  const startSession = async () => {
    console.log("Starting session with filters:", { bank, selectedChapter, selectedModule, year, difficulty, onlyUnseen });
    alert('Session creation logic to be implemented.');
  }
  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-10">
      <div className="max-w-3xl mb-8"><h1 className="text-3xl font-bold mb-2">Qbank {bank === 'general' ? 'G√©n√©rale' : 'R√©sidanat'}</h1><p className="text-gray-600">{bank === 'general' ? 'Questions de toutes les ann√©es (1‚Äì6). Filtrez par ann√©e, chapitre, module‚Ä¶' : 'Questions cibl√©es sur les cours inclus dans le R√©sidanat.'}</p></div>
      <div className="grid lg:grid-cols-12 gap-8">
        <div className="lg:col-span-4">
          <Card><CardContent className="p-5 space-y-5">
              <div><p className="text-sm font-medium mb-1">Chapitre</p><Select value={selectedChapter} onValueChange={(v) => { setSelectedChapter(v); setSelectedModule('') }}><SelectTrigger><SelectValue placeholder="Choisir un chapitre" /></SelectTrigger><SelectContent>{chapters.map((c) => (<SelectItem key={c.id} value={c.id}>{c.title}</SelectItem>))}</SelectContent></Select></div>
              <div><p className="text-sm font-medium mb-1">Module</p><Select value={selectedModule} onValueChange={setSelectedModule} disabled={!selectedChapter}><SelectTrigger><SelectValue placeholder={selectedChapter ? 'Choisir un module' : 'S√©lectionnez d‚Äôabord un chapitre'} /></SelectTrigger><SelectContent>{modules.map((m) => (<SelectItem key={m.id} value={m.id}>{m.title}</SelectItem>))}</SelectContent></Select></div>
              <div><p className="text-sm font-medium mb-1">Difficult√©</p><Select value={difficulty} onValueChange={setDifficulty}><SelectTrigger><SelectValue placeholder="Toutes" /></SelectTrigger><SelectContent><SelectItem value="all">Toutes</SelectItem><SelectItem value="1">1</SelectItem><SelectItem value="2">2</SelectItem><SelectItem value="3">3</SelectItem><SelectItem value="4">4</SelectItem><SelectItem value="5">5</SelectItem></SelectContent></Select></div>
              <div className={canSetYear ? '' : 'opacity-50'}><p className="text-sm font-medium mb-1">Ann√©e</p><Select value={year} onValueChange={setYear} disabled={!canSetYear}><SelectTrigger><SelectValue placeholder="Toutes" /></SelectTrigger><SelectContent><SelectItem value="all">Toutes</SelectItem><SelectItem value="1">1</SelectItem><SelectItem value="2">2</SelectItem><SelectItem value="3">3</SelectItem><SelectItem value="4">4</SelectItem><SelectItem value="5">5</SelectItem><SelectItem value="6">6</SelectItem></SelectContent></Select></div>
              <div className="flex items-center gap-2"><Checkbox id="unseen" checked={onlyUnseen} onCheckedChange={(v) => setOnlyUnseen(Boolean(v))} /><label htmlFor="unseen" className="text-sm">Uniquement non vues</label></div>
              <Separator />
              <Button className="w-full" onClick={startSession}>D√©marrer une session</Button>
          </CardContent></Card>
        </div>
        <div className="lg:col-span-8"><Card><CardContent className="p-5"><p className="font-semibold mb-2">Aper√ßu</p><p className="text-sm text-gray-600 mb-4">Calcul du nombre de questions...</p></CardContent></Card></div>
      </div>
    </div>
  )
}
EOF

# --- Qbank (Session Viewer) ---
echo "üìÑ √âcriture de src/app/qbank/session/[sessionId]/page.tsx..."
cat << 'EOF' > src/app/qbank/session/[sessionId]/page.tsx
'use client'
import { useEffect, useState } from 'react'
import { useParams } from 'next/navigation'
import { supabase } from '@/lib/supabase'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Skeleton } from '@/components/ui/skeleton'
export default function Page() {
  const { sessionId } = useParams<{ sessionId: string }>()
  const [loading, setLoading] = useState(true)
  const [index, setIndex] = useState(0)
  const [questions, setQuestions] = useState<any[]>([])
  useEffect(() => {
    const fetchData = async () => {
      if (!sessionId) return;
      setLoading(true);
      const { data } = await supabase.from('qbank_session_questions').select(`id, index, question: qbank_questions (id, stem, explanation, difficulty, choices: qbank_choices (id, label, is_correct))`).eq('session_id', sessionId).order('index', { ascending: true })
      setQuestions(data ?? [])
      setLoading(false)
    }
    fetchData()
  }, [sessionId])
  if (loading) return (<div className="container mx-auto px-4 py-10"><Skeleton className="h-8 w-1/4 mb-4" /><Skeleton className="h-64 w-full mb-4" /><Skeleton className="h-32 w-full" /></div>)
  if (questions.length === 0) return <div className="container mx-auto px-4 py-10">Session invalide ou aucune question trouv√©e.</div>
  const q = questions[index]
  const progress = Math.round(((index + 1) / questions.length) * 100)
  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div className="flex items-center justify-between mb-4"><div className="text-sm text-gray-600">Session {sessionId.substring(0, 8)}...</div><div className="w-64"><Progress value={progress} /></div></div>
      <Card className="mb-4"><CardContent className="p-5">
          <div className="flex items-center justify-between mb-3"><Badge variant="secondary">Question {index + 1} / {questions.length}</Badge><Badge variant="secondary">Difficult√© {q?.question?.difficulty ?? '-'}</Badge></div>
          <p className="font-medium mb-4">{q?.question?.stem}</p>
          <div className="space-y-2">{(q?.question?.choices ?? []).map((c: any) => (<button key={c.id} className="w-full text-left rounded-lg border border-gray-200 px-3 py-2 hover:border-primary-300 hover:bg-primary-50 transition">{c.label}</button>))}</div>
          <div className="mt-4 flex items-center justify-between">
            <Button variant="outline" disabled={index === 0} onClick={() => setIndex((i) => Math.max(0, i - 1))}>Pr√©c√©dent</Button>
            <div className="flex gap-2"><Button variant="secondary">R√©v√©ler correction</Button><Button onClick={() => setIndex((i) => Math.min(questions.length - 1, i + 1))} disabled={index >= questions.length - 1}>Suivant</Button></div>
          </div>
      </CardContent></Card>
      <Card><CardContent className="p-5"><p className="font-semibold mb-2">Explication</p><p className="text-gray-700">{q?.question?.explanation ?? 'La correction sera affich√©e apr√®s avoir r√©pondu.'}</p></CardContent></Card>
    </div>
  )
}
EOF

# --- Fichiers manquants (pour √©viter les erreurs d'import) ---
# On ne met pas les pages de cours d√©taill√©s pour l'instant pour simplifier
touch src/app/residanat/[chapter]/[module]/page.tsx
touch src/app/residanat/[chapter]/[module]/[course]/page.tsx


echo "--------------------------------------------------------"
echo "‚úÖ Reconstruction termin√©e avec succ√®s !"
echo "--------------------------------------------------------"
echo "Prochaines √©tapes :"
echo "1. Cr√©ez vos tables dans Supabase si ce n'est pas d√©j√† fait."
echo "2. Ajoutez des donn√©es de test (chapitres, modules) pour voir les pages."
echo "3. Ex√©cutez 'npm run dev' pour d√©marrer votre serveur."
echo "4. Remplacez 'public/images/logo.png' par votre vrai logo."